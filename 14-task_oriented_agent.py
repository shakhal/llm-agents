from langchain.agents import AgentExecutor, create_tool_calling_agent
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.tools import StructuredTool
from pydantic import BaseModel, Field
import os
from dotenv import load_dotenv

load_dotenv()
os.environ["OPENAI_API_KEY"] = os.getenv('OPENAI_API_KEY')
llm = ChatOpenAI(model="gpt-4o-mini", max_tokens=1000, temperature=0)

# first let's define the functions that the agent can use
def summarize(text):
    # Create a PromptTemplate for summarization
    prompt = PromptTemplate(
        input_variables=["text"],  # Specify the input variable
        template="Summarize the following text:\n\n{text}\n\nSummary:"  # Define the template for summarization
    )
    chain = prompt | llm  # Create a chain by piping the prompt to the language model
    return chain.invoke({"text": text}).content  # Invoke the chain with the input text and return the content of the response

def translate(text):
    # Create a PromptTemplate for translation
    prompt = PromptTemplate(
        input_variables=["text"],  # Specify the input variable
        template="Translate the following text to Spanish:\n\n{text}\n\nTranslation:"  # Define the template for translation
    )
    chain = prompt | llm  # Create a chain by piping the prompt to the language model
    return chain.invoke({"text": text}).content  # Invoke the chain with the input text and return the content of the response

class TextInput(BaseModel):
    # Define a Pydantic model for input validation
    text: str = Field(description="The text to summarize or translate")  # Define a text field with a description


# test the functions
text = "The quick brown fox jumps over the lazy dog."
print(summarize(text))
print(translate(text))

#Define the tools for the agent
tools = [
    StructuredTool.from_function(
        func=summarize,  # The function to be wrapped as a tool
        name="Summarize",  # Name of the tool
        description="Useful for summarizing text",  # Description of what the tool does
        args_schema=TextInput  # The Pydantic model defining the input schema
    ),
    StructuredTool.from_function(
        func=translate,  # The function to be wrapped as a tool
        name="Translate",  # Name of the tool
        description="Useful for translating text to Spanish",  # Description of what the tool does
        args_schema=TextInput  # The Pydantic model defining the input schema
    )
]


# Initialize the agent
prompt = PromptTemplate(
    input_variables=["input", "agent_scratchpad"],  # Define the input variables for the prompt
    template="""Summarize the following text and then translate the summary to Spanish:

Text: {input}

Use the following steps:
1. Use the Summarize tool to summarize the text. Pass the entire text as the 'text' argument.
2. Use the Translate tool to translate the summary to Spanish. Pass the summary as the 'text' argument.
3. Critical! max iterations is 3, Immediately after using both tools, respond with the final result in the following format:
   Summary (English): [English summary]
   Translation (Spanish): [Spanish translation]

Do not use any tools after providing the formatted output.

{agent_scratchpad}"""  # Define the template for the agent's instructions
)

# Create an agent using the defined tools and prompt
agent = create_tool_calling_agent(llm, tools, prompt)

# Create an AgentExecutor to run the agent
agent_executor = AgentExecutor(
    agent=agent,  # The agent to execute
    tools=tools,  # The tools available to the agent
    verbose=True,  # Enable verbose output
    max_iterations=3,  # Set maximum number of iterations
    early_stopping_method="force"  # Force stop after max_iterations
)

def run_agent_with_query(agent_executor, query):
    """
    Execute the agent with a given query and return the output.

    Args:
        agent_executor (AgentExecutor): The configured AgentExecutor to run.
        query (str): The input text to be processed by the agent.

    Returns:
        str: The output generated by the agent after processing the query.
    """
    # Invoke the agent_executor with the query as input
    result = agent_executor.invoke({"input": query})
    
    # Extract and return the 'output' field from the result
    return result['output']

# Example usage of the agent with a query
# Define the input query
query = """The quick brown fox jumps over the lazy dog. This sentence is often used as a pangram in typography 
to display font examples, as it contains every letter of the English alphabet. However, it's not the only pangram 
in existence. Another example is 'Pack my box with five dozen liquor jugs', which is shorter but less commonly used."""

# Run the agent with the query
result = run_agent_with_query(agent_executor, query)

# Print the original query
print("\nQuery:")
print(query)

# Print the result from the agent
print("\nResult:")
print(result)